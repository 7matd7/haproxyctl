#!/usr/bin/ruby 

require 'socket'

# change this if the file is elsewhere
config	= "/etc/haproxy/haproxy.cfg" || raise("Expecting haproxy configuration file in #{config}")

# grab the statistics socket from above
socket	= `awk '/stats socket/ {print $3}' #{config}`.chomp || raise("Expecting \'stats socket <UNIX_socket_path>\' in #{config}")

# where haproxy lives and pid (either in conf or static location)
exec    = `which haproxy`.chomp || raise("Where the F is haproxy?")
pid	= `awk '/pidfile/ {print $2}' #{config}` 
unless ( pid =~ /\w+/ )
	pid = "/var/run/haproxy.pid"
end
pidof	= `pidof haproxy`.chomp

# the help / no argument output includes the help output from haproxy's stats socket
unless ARGV.length == 1
	puts "usage: #{$0} <argument> 
where argument can be:
  start		 : start haproxy unless it is already running
  stop		 : stop an existing haproxy
  restart	 : restart the process
  status	 : is haproxy running?  on what ports per lsof?
  configcheck    : check #{config}
  cloudkick      : cloudkick.com-friendly status and metric for connected users"
end

argument = case ARGV[0]
	when "start"
		if ( pidof =~ /\d+/ )
			raise("haproxy is already running!")
		else
			puts "starting haproxy..."
			system("#{exec} -f #{config} -D -p #{pid}")
			newpid=`cat #{pid}`
			if ( newpid =~ /\d+/ )
				puts "done.  Running on pid #{newpid}."
			else
				raise("failed to start!")
			end
		end
	when "stop"
		if ( pidof =~ /\d+/ )
			puts "stopping haproxy on pid #{pidof}"
			system("kill #{pidof}") || system("killall haproxy")
			puts "done"
		else
			raise("cannot find haproxy pid")
		end
	when "restart"
		if ( pidof =~ /\d+/ )
			puts "stopping..."
			system("kill #{pidof}") || system("killall haproxy")
			puts "waiting a ms..."
			puts "checking if haproxy is still running..."
			stillpidof = `pidof haproxy`.chomp
			if ( stillpidof =~ /\d+/ )
				raise("I could not stop HAProxy.  Still running on #{stillpidof}")
			else
				puts "starting haproxy..."
				system("#{exec} -f #{config} -D -p #{pid}")
			end
		end
	when "status"
		if ( pidof =~ /\d+/ )
			puts "haproxy is running.  these ports are used and guys are connected."
			system("lsof -ln -i |awk \'$2 ~ /#{pidof}/ {print $8\" \"$9}\'")
		else
			puts "haproxy is not running"
		end
	when "configcheck"
		puts `#{exec} -c -f #{config}`
	when "cloudkick"
		if ( pidof =~ /\d+/ )
			puts "status ok haproxy is running"
			conn = `lsof -ln -i |grep -c #{pidof}`.chomp.to_i
			# removes the listener
			conn = conn - 1
			puts "metric connections int #{conn}"
		else
			puts "status err haproxy is not running!"
		end
		
	else
	
		ctl=UNIXSocket.new(socket)
		ctl.puts "#{ARGV}"
		
		while (line = ctl.gets) do
			unless ( line =~ /Unknown command/ )
                		puts line
			end
		end
		ctl.close
end

