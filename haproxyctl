#!/usr/bin/ruby 

# variables you may actually need to change

# change this if the file is elsewhere
@config	= "/etc/haproxy/haproxy.cfg" || raise("Expecting haproxy configuration file in #{@config}")

# grab the statistics socket from above
socket	= `awk '/stats socket/ {print $3}' #{@config}`.chomp || raise("Expecting \'stats socket <UNIX_socket_path>\' in #{@config}")

# where haproxy lives and pid (either in conf or static location)
@exec    = `which haproxy`.chomp || raise("Where the F is haproxy?")
@pid	= `awk '/pidfile/ {print $2}' #{@config}` 
unless ( @pid =~ /\w+/ )
	@pid = "/var/run/haproxy.pid"
end

# the functions

def start()
	puts "starting haproxy..."
	system("#{@exec} -f #{@config} -D -p #{@pid}")
	newpidof = `pidof haproxy`.chomp
	if ( newpidof =~ /\d+/ )
		puts "haproxy is running on pid #{newpidof}"
		return true
	else
		puts "error.  haproxy did not start!"
		return nil
	end
end

def stop(pid)
	if ( pid )
		puts "stopping haproxy on pid #{pid}..."
		system("kill #{pid}") || system("killall haproxy")
		puts "... stopped"
	else
		puts "haproxy is not running!"
	end
end

def check_running()
	pidof	= `pidof haproxy`.chomp
	if ( pidof =~ /^\d+$/ )
		return pidof
	else
		return nil
	end
end
	
# the help / no argument output includes the help output from haproxy's stats socket
if ( ARGV.length != 1 || ARGV[0] =~ /help/ )
	puts "usage: #{$0} <argument> 
where argument can be:
  start		 : start haproxy unless it is already running
  stop		 : stop an existing haproxy
  restart	 : restart the process
  reload	 : gracefully shutdown and reload #{@config}
  status	 : is haproxy running?  on what ports per lsof?
  configcheck    : check #{@config}
  cloudkick      : cloudkick.com-friendly status and metric for connected users"
end

pidof = check_running()

argument = case ARGV[0]

	when "start"
		if ( pidof )
			raise("haproxy is already running on pid #{pidof}!")
		else
			start()
		end

	when "stop"
		stop(check_running())

	when "restart"
		if ( pidof )
			stop(pidof)
			stillpidof = check_running()
			if ( stillpidof == pidof )
				raise("I could not stop HAProxy.  Still running on #{stillpidof}")
			end
			start()
		else
			puts "haproxy was not running.  starting..."
			start()
		end

	when "reload"
		if ( pidof )
			puts "gracefully stopping connections on pid #{pidof}..."
			system("#{@exec} -f #{@config} -D -p #{@pid} -sf #{pidof}")
			puts "checking if connections still alive..."
			newpidof = check_running() 
			while ( pidof == newpidof )
				puts "still haven't killed old pid.  waiting 3s for existing connections to die... (ctrl+c to stop)"
				sleep 3
				stillpidof = `pidof haproxy`.chomp
			end
			start()
		else
			puts "haproxy not running.  starting..."
			start()
		end

	when "status"
		if ( pidof )
			puts "haproxy is running on pid #{pidof}.\nthese ports are used and guys are connected:"
			system("lsof -ln -i |awk \'$2 ~ /#{pidof}/ {print $8\" \"$9}\'")
		else
			puts "haproxy is not running"
		end

	when "configcheck"
		puts `#{@exec} -c -f #{@config}`

	when "cloudkick"
		if ( pidof )
			puts "status ok haproxy is running"
			conn = `lsof -ln -i |grep -c #{pidof}`.chomp.to_i
			# removes the listener
			conn = conn - 1
			puts "metric connections int #{conn}"
		else
			puts "status err haproxy is not running!"
		end
		
	else
		require 'socket'

		ctl=UNIXSocket.new(socket)
		ctl.puts "#{ARGV}"
		
		while (line = ctl.gets) do
			unless ( line =~ /Unknown command/ )
                		puts line
			end
		end
		
		ctl.close
end

